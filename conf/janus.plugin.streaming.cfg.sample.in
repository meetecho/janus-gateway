; [stream-name]
; type = rtp|live|ondemand|rtsp
;        rtp = stream originated by an external tool (e.g., gstreamer or
;              ffmpeg) and sent to the plugin via RTP
;        live = local file streamed live to multiple listeners
;               (multiple listeners = same streaming context)
;        ondemand = local file streamed on-demand to a single listener
;                   (multiple listeners = different streaming contexts)
;        rtsp = stream originated by an external RTSP feed (only
;               available if libcurl support was compiled)
; id = <unique numeric ID> (if missing, a random one will be generated)
; description = This is my awesome stream
; is_private = yes|no (private streams don't appear when you do a 'list'
;			request)
; secret = <optional password needed for manipulating (e.g., destroying
;			or enabling/disabling) the stream>
; pin = <optional password needed for watching the stream>
; filename = path to the local file to stream (only for live/ondemand)
; audio = yes|no (do/don't stream audio)
; video = yes|no (do/don't stream video)
;    The following options are only valid for the 'rtp' type:
; audioport = local port for receiving audio frames
; audiomcast = multicast group port for receiving audio frames, if any
; audiocodec = <audio RTP payload type> (e.g., 111)
; audiortpmap = RTP map of the audio codec (e.g., opus/48000/2)
; videoport = local port for receiving video frames
; videomcast = multicast group port for receiving video frames, if any
; videocodec = <video RTP payload type> (e.g., 100)
; videortpmap = RTP map of the video codec (e.g., VP8/90000)
; videobufferkf = yes|no (whether the plugin should store the latest
;		keyframe and send it immediately for new viewers, EXPERIMENTAL)
; url = RTSP stream URL (only for restreaming RTSP)
;
; To test the [gstreamer-sample] example, check the test_gstreamer.sh
; script in the plugins/streams folder. To test the live and on-demand
; audio file streams, instead, the install.sh installation script
; automatically downloads a couple of files (radio.alaw, music.mulaw)
; to the plugins/streams folder. 

[gstreamer-sample]
type = rtp
id = 1
description = Opus/VP8 live stream coming from gstreamer
audio = yes
video = yes
audioport = 5002
audiopt = 111
audiortpmap = opus/48000/2
videoport = 5004
videopt = 100
videortpmap = VP8/90000
secret = adminpwd

[file-live-sample]
type = live
id = 2
description = a-law file source (radio broadcast)
filename = @streamdir@/radio.alaw		; See install.sh
audio = yes
video = no
secret = adminpwd

[file-ondemand-sample]
type = ondemand
id = 3
description = mu-law file source (music)
filename = @streamdir@/music.mulaw	; See install.sh
audio = yes
video = no
secret = adminpwd

;
; Firefox Nightly supports H.264 through Cisco's OpenH264 plugin. The only
; supported profile is the baseline one. This is an example of how to create
; a H.264 mountpoint: you can feed it an x264enc+rtph264pay pipeline in
; gstreamer.
;
;[h264-sample]
;type = rtp
;id = 10
;description = H.264 live stream coming from gstreamer
;audio = no
;video = yes
;videoport = 8004
;videopt = 126
;videortpmap = H264/90000
;videofmtp = profile-level-id=42e01f\;packetization-mode=1

;
; This is a sample configuration for Opus/VP8 multicast streams
;
;[gstreamer-multicast]
;type = rtp
;id = 20
;description = Opus/VP8 live multicast stream coming from gstreamer 
;audio = yes
;video = yes
;audioport = 5002
;audiomcast = 232.3.4.5
;audiopt = 111
;audiortpmap = opus/48000/2
;videoport = 5004
;videomcast = 232.3.4.5
;videopt = 100
;videortpmap = VP8/90000

;
; This is a sample configuration for an RTSP stream
; NOTE WELL: the plugin does NOT transcode, so the RTSP stream MUST be
; in a format the browser can digest (e.g., VP8 or H.264 for video)
;
;[rtsp-test]
;type = rtsp
;id = 99
;description = RTSP Test
;audio = no
;video = yes
;url=rtsp://127.0.0.1:8554/unicast
