# Web server stuff: whether any should be enabled, which ports they
# should use, whether security should be handled directly or demanded to
# an external application (e.g., web frontend) and what should be the
# base path for the Janus API protocol. You can also specify the
# threading model to use for the HTTP webserver: by default this is
# 'unlimited' (which means a thread per connection, as specified by the
# libmicrohttpd documentation), using a number will make use of a thread
# pool instead. Since long polls are involved, make sure you choose a
# value that doesn't keep new connections waiting. Notice that by default
# all the web servers will try and bind on both IPv4 and IPv6: if you
# want to only bind to IPv4 addresses (e.g., because your system does not
# support IPv6), you should set the web server 'ip' property to '0.0.0.0'.

general:
# Whether the JSON messages should be indented (default),
# plain (no indentation) or compact (no indentation and no spaces)
    json: indented
# Base path to bind to in the web server (plain HTTP only)
    base_path: /janus
# unlimited=thread per connection, number=thread pool
    threads: unlimited
# Whether to enable the plain HTTP interface
    http: yes
# Web server HTTP port
    port: 8088
# Whether we should bind this server to a specific interface only
    #interface: eth0
# Whether we should bind this server to a specific IP address (v4 or v6) only
    #ip: 192.168.0.1
# Whether to enable HTTPS (default=no)
    https: no
# Web server HTTPS port, if enabled
    #secure_port: 8089
# Whether we should bind this server to a specific interface only
    #secure_interface: eth0
# Whether we should bind this server to a specific IP address (v4 or v6) only
    #secure_ip: 192.168.0.1
# Only allow requests coming from this comma separated list of addresses
    #acl: 127.,192.168.0.

# Janus can also expose an admin/monitor endpoint, to allow you to check
# which sessions are up, which handles they're managing, their current
# status and so on. This provides a useful aid when debugging potential
# issues in Janus. The configuration is pretty much the same as the one
# already presented above for the webserver stuff, as the API is very
# similar: choose the base bath for the admin/monitor endpoint (/admin
# by default), ports, threading model, etc. Besides, you can specify
# a secret that must be provided in all requests as a crude form of
# authorization mechanism, and partial or full source IPs if you want to
# limit access basing on IP addresses. For security reasons, this
# endpoint is disabled by default, enable it by setting admin_http=yes.
admin:
# Base path to bind to in the admin/monitor web server (plain HTTP only)
    admin_base_path: /admin
# unlimited=thread per connection, number=thread pool
    admin_threads: unlimited
# Whether to enable the plain HTTP interface
    admin_http: no
# Admin/monitor web server HTTP port
    admin_port: 7088
# Whether we should bind this server to a specific interface only
    #admin_interface: eth0
# Whether we should bind this server to a specific IP address (v4 or v6) only
    #admin_ip: 192.168.0.1
# Whether to enable HTTPS (default=no)
    admin_https: no
# Admin/monitor web server HTTPS port, if enabled
    #admin_secure_port: 7889
# Whether we should bind this server to a specific interface only
    #admin_secure_interface: eth0
# Whether we should bind this server to a specific IP address (v4 or v6) only
    #admin_secure_ip: 192.168.0.1
# Only allow requests coming from this comma separated list of addresses
    #admin_acl: 127.,192.168.0.

# The HTTP servers created in Janus support CORS out of the box, but by
# default they return a wildcard (*) in the 'Access-Control-Allow-Origin'
# header. This works fine in most situations, except when we have to
# respond to a credential request (withCredentials=true in the XHR). If
# you need that, uncomment and set the 'allow_origin' below to specify
# what must be returned in 'Access-Control-Allow-Origin'. More details:
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS
cors:
    #allow_origin: http://foo.example

# Certificate and key to use for HTTPS.
certificates:
    cert_pem: /home/lminiero/test/yaml/share/janus/certs/mycert.pem
    cert_key: /home/lminiero/test/yaml/share/janus/certs/mycert.key
