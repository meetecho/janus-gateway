language: c
compiler:
  - gcc
  - clang

arch: amd64
os: linux
dist: bionic

env:
  global:
    - JANUS_COMMON_OPTS="--disable-docs --enable-post-processing --enable-plugin-lua --enable-plugin-duktape --enable-json-logger"
  jobs:
    - JANUS_CONFIG_OPTS="" LIBCURL=YES DATACHANNELS=YES
    - JANUS_CONFIG_OPTS="--disable-data-channels" LIBCURL=YES DATACHANNELS=NO
    - JANUS_CONFIG_OPTS="--disable-turn-rest-api --disable-sample-event-handler" LIBCURL=NO DATACHANNELS=YES

git:
  quiet: true
  depth: 10

addons:
  apt:
    update: true
    packages:
      - autoconf
      - cmake
      - gengetopt
      - gtk-doc-tools
      - libavcodec-dev
      - libavformat-dev
      - libavutil-dev
      - libcollection-dev
      - libconfig-dev
      - libevent-dev
      - libglib2.0-dev
      - libgnutls28-dev
      - libini-config-dev
      - liblua5.3-dev
      - libjansson-dev
      - libmicrohttpd-dev
      - libmount-dev
      - libnanomsg-dev
      - libogg-dev
      - libopus-dev
      - libsofia-sip-ua-dev
      - libssl-dev
      - libvorbis-dev
      - ninja-build
      - openssl
      - python3
      - python3-pip
      - python3-setuptools

before_install:
  - pip3 install wheel
  - pip3 install meson

before_script:
  - if [ $LIBCURL = YES ]; then sudo apt-get -y install libcurl4-openssl-dev; fi
  - travis_retry git clone -b master https://gitlab.freedesktop.org/libnice/libnice.git libnice
  - if [ $CC = clang ]; then LNICE_CFLAGS="-Wno-cast-align"; fi; pushd libnice && meson setup -Dprefix=/usr -Dlibdir=lib -Dc_args="$LNICE_CFLAGS" -Ddebug=false -Doptimization=0 -Dexamples=disabled -Dgtk_doc=disabled -Dgupnp=disabled -Dgstreamer=disabled -Dtests=disabled build && ninja -C build && sudo ninja -C build install && popd
  - travis_retry git clone -b v2.3.0 https://github.com/cisco/libsrtp.git libsrtp
  - pushd libsrtp && ./configure --prefix=/usr --enable-openssl && make -j$(nproc) shared_library && sudo make install && popd
  - if [ $DATACHANNELS = YES ]; then git clone -b master https://github.com/sctplab/usrsctp usrsctp; fi
  - if [ $DATACHANNELS = YES ]; then pushd usrsctp && ./bootstrap && ./configure --prefix=/usr --disable-static --disable-debug --disable-programs --disable-inet --disable-inet6 && make -j$(nproc) && sudo make install && popd; fi
  - travis_retry git clone -b v3.2.2 https://github.com/warmcat/libwebsockets.git libwebsockets
  - pushd libwebsockets && mkdir -p build && pushd build && cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DLWS_WITH_STATIC=OFF -DLWS_WITHOUT_CLIENT=ON -DLWS_WITHOUT_TESTAPPS=ON -DLWS_WITHOUT_TEST_SERVER=ON -DLWS_WITH_HTTP2=OFF .. && make -j$(nproc) && sudo make install && popd && popd
  - travis_retry git clone -b v0.10.0 https://github.com/alanxz/rabbitmq-c rabbitmq-c
  - pushd rabbitmq-c && mkdir build && pushd build && cmake -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_TOOLS=OFF .. && sudo cmake --build . --target install -- -j$(nproc) && popd && popd
  - travis_retry git clone -b v1.3.1 https://github.com/eclipse/paho.mqtt.c.git paho.mqtt.c
  - pushd paho.mqtt.c && cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr -DPAHO_WITH_SSL=TRUE -DPAHO_BUILD_SAMPLES=FALSE -DPAHO_BUILD_DOCUMENTATION=FALSE && make -j$(nproc) && sudo make install && popd

script:
  - ./autogen.sh
  - if [ $LIBCURL = NO ]; then export LCURL=$(sudo find /usr -type f -name libcurl.pc); sudo mv "$LCURL" "$LCURL".bak; fi
  - ./configure $JANUS_COMMON_OPTS $JANUS_CONFIG_OPTS
  - if [ $LIBCURL = NO ]; then sudo mv "$LCURL".bak "$LCURL"; fi
  - make -j$(nproc)
  - make check-fuzzers
